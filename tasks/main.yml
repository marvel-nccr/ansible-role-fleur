---
- name: Install fleur dependencies
  become: true
  become_user: "{{ root_user }}"
  apt:
      name: "{{ item }}"
      state: latest
  with_items:
    - build-essential
    - gfortran
    - gcc
    - openmpi-bin
    - libopenmpi-dev
    - libfftw3-dev
    - libfftw3-mpi-dev
    - liblapack-dev
    - libblas-dev
    - binutils-gold 
    - git 
    - cmake 
    - libxml2-dev 
    - doxygen

- name: Get fleur source
  unarchive:
    src: "{{ fleur_url }}"
    dest: "{{ fleur_code_folder }}"
    remote_src: yes

  # note: this does not throw an error, even if configure fails...
- name: Configure fleur
  shell: FC=mpif90 ./configure.sh AUTO
  args:
    chdir: "{{ fleur_topdir }}"
    creates: "{{ fleur_topdir }}/build/Makefile"

- name: Make fleur executables
  shell: "make"
  args:
    chdir: "{{ fleur_topdir }}/build"
    creates: "{{ fleur_topdir }}/build/fleur"
  register: fleur_make

- import_tasks: tests.yml
  when: fleur_make.changed and run_tests is defined and run_tests

- name: "Put a line in ~/.profile to add fleur to the path"
  lineinfile:
    path: "${HOME}/.profile"
    line: "export PATH=${PATH}:{{ fleur_topdir }}/build"

- include_role:
    name: release_notes
  vars:
    section: "fleur"
    option: "version"
    value: "{{ fleur_version }} {{ fleur_release }}"
  when: release_notes is defined and release_notes

- include_role:
    name: release_notes
  vars:
    section: "fleur"
    option: "usage"
    value: >-
      fleur is compiled and installed in {{ fleur_topdir }}. 
      The folder with executables is added to the path, so simply run 'fleur'
  when: release_notes is defined and release_notes
